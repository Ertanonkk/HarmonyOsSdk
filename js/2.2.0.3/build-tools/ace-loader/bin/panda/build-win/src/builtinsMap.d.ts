import * as ir from "./irnodes";
export declare const builtinsCodeMap: {
    "builtin.acc": {
        i32tof32: number;
        0: string;
        i64tof32: number;
        1: string;
        f64tof32: number;
        2: string;
        monitorenter: number;
        3: string;
        monitorexit: number;
        4: string;
        ldnan: number;
        5: string;
        ldinfinity: number;
        6: string;
        ldglobalthis: number;
        7: string;
        ldundefined: number;
        8: string;
        ldnull: number;
        9: string;
        ldsymbol: number;
        10: string;
        ldglobal: number;
        11: string;
        ldtrue: number;
        12: string;
        ldfalse: number;
        13: string;
        throwDyn: number;
        14: string;
        typeofDyn: number;
        15: string;
        getUnmappedArgs: number;
        16: string;
        toboolean: number;
        17: string;
        getPropIterator: number;
        18: string;
        asyncFunctionEnter: number;
        19: string;
        ldHole: number;
        20: string;
        ReturnUndefined: number;
        21: string;
        createemptyobject: number;
        22: string;
        createemptyarray: number;
        23: string;
        GetIterator: number;
        24: string;
        ThrowThrowNotExists: number;
        25: string;
        ThrowPatternNonCoercible: number;
        26: string;
        LdHomeObject: number;
        27: string;
    };
    "builtin.bin2": {
        fadd2f32: number;
        0: string;
        fsub2f32: number;
        1: string;
        fmul2f32: number;
        2: string;
        fdiv2f32: number;
        3: string;
        fmod2f32: number;
        4: string;
        fcmpl2f32: number;
        5: string;
        fcmpg2f32: number;
        6: string;
        ldboolean: number;
        7: string;
        ldnumber: number;
        8: string;
        ldstring: number;
        9: string;
        ldbigint: number;
        10: string;
        add2Dyn: number;
        11: string;
        sub2Dyn: number;
        12: string;
        mul2Dyn: number;
        13: string;
        div2Dyn: number;
        14: string;
        mod2Dyn: number;
        15: string;
        eqDyn: number;
        16: string;
        noteqDyn: number;
        17: string;
        lessDyn: number;
        18: string;
        lesseqDyn: number;
        19: string;
        greaterDyn: number;
        20: string;
        greatereqDyn: number;
        21: string;
        shl2Dyn: number;
        22: string;
        shr2Dyn: number;
        23: string;
        ashr2Dyn: number;
        24: string;
        and2Dyn: number;
        25: string;
        or2Dyn: number;
        26: string;
        xor2Dyn: number;
        27: string;
        tonumber: number;
        28: string;
        negDyn: number;
        29: string;
        notDyn: number;
        30: string;
        incDyn: number;
        31: string;
        decDyn: number;
        32: string;
        expDyn: number;
        33: string;
        isinDyn: number;
        34: string;
        instanceofDyn: number;
        35: string;
        strictNotEqDyn: number;
        36: string;
        strictEqDyn: number;
        37: string;
        ldlexenvDyn: number;
        38: string;
        resumeGenerator: number;
        39: string;
        getResumeMode: number;
        40: string;
        createGeneratorObj: number;
        41: string;
        throwUndefined: number;
        42: string;
        throwConstAssignment: number;
        43: string;
        getTemplateObject: number;
        44: string;
        getnextpropname: number;
        45: string;
        Call0Dyn: number;
        46: string;
        ThrowIfNotObject: number;
        47: string;
        IterNext: number;
        48: string;
        CloseIterator: number;
        49: string;
        CopyModule: number;
        50: string;
        SuperCallSpread: number;
        51: string;
    };
    "builtin.tern3": {
        ldobject: number;
        0: string;
        ldfunction: number;
        1: string;
        delobjprop: number;
        2: string;
        defineglobalvar: number;
        3: string;
        definelocalvar: number;
        4: string;
        definefuncexpr: number;
        5: string;
        refeqDyn: number;
        6: string;
        callruntimerange: number;
        7: string;
        newobjspreadDyn: number;
        8: string;
        newlexenvDyn: number;
        9: string;
        createIterResultObj: number;
        10: string;
        suspendGenerator: number;
        11: string;
        asyncFunctionAwaitUncaught: number;
        12: string;
        throwUndefinedIfHole: number;
        13: string;
        Call1Dyn: number;
        14: string;
        copydataproperties: number;
        15: string;
        starrayspread: number;
        16: string;
        GetIteratorNext: number;
        17: string;
        setobjectwithproto: number;
        18: string;
    };
    "builtin.quatern4": {
        callspreadDyn: number;
        0: string;
        asyncFunctionResolve: number;
        1: string;
        asyncFunctionReject: number;
        2: string;
        Call2Dyn: number;
        3: string;
    };
    "builtin.quin5": {
        Call3Dyn: number;
        0: string;
        definegettersetterbyvalue: number;
        1: string;
    };
    "builtin.r2i": {
        tryLdGlobalByValue: number;
        0: string;
        newobjDynrange: number;
        1: string;
        tryStGlobalByValue: number;
        2: string;
        CalliRangeDyn: number;
        3: string;
        CalliThisRangeDyn: number;
        4: string;
        SuperCall: number;
        5: string;
    };
    "builtin.r3i": {
        ldObjByValue: number;
        0: string;
        stObjByValue: number;
        1: string;
        LdObjByIndex: number;
        2: string;
        StObjByIndex: number;
        3: string;
        StOwnByIndex: number;
        4: string;
        StOwnByValue: number;
        5: string;
        CreateObjectWithExcludedKeys: number;
        6: string;
        StSuperByValue: number;
        7: string;
        LdSuperByValue: number;
        8: string;
    };
    "builtin.r4i": {};
    "builtin.id": {
        ImportModule: number;
        0: string;
        StModuleVar: number;
        1: string;
    };
    "builtin.midr": {
        definefuncDyn: number;
        0: string;
        defineNCFuncDyn: number;
        1: string;
        defineGeneratorFunc: number;
        2: string;
        defineAsyncFunc: number;
        3: string;
        defineMethod: number;
        4: string;
    };
    "builtin.idi": {
        TryLdGlobalByName: number;
        0: string;
        TryStGlobalByName: number;
        1: string;
        LdGlobalVar: number;
        2: string;
        StGlobalVar: number;
        3: string;
    };
    "builtin.idr3i": {
        LdObjByName: number;
        0: string;
        StObjByName: number;
        1: string;
        StOwnByName: number;
        2: string;
        LdModvarByName: number;
        3: string;
        LdSuperByName: number;
        4: string;
        StSuperByName: number;
        5: string;
    };
    "builtin.idr4i": {};
    "builtin.i2r3": {
        LdLexVarDyn: number;
        0: string;
    };
    "builtin.i2r4": {
        StLexVarDyn: number;
        0: string;
    };
    "builtin.imm": {
        copyrestargs: number;
        0: string;
        createobjectwithbuffer: number;
        1: string;
        createarraywithbuffer: number;
        2: string;
        createobjecthavingmethod: number;
        3: string;
        ThrowIfSuperNotCorrectCall: number;
        4: string;
    };
    "builtin.imr2": {
        DefineClassWithBuffer: number;
        0: string;
    };
    "builtin.idr3": {};
    "builtin.idr4": {};
    "builtin.idr6": {};
};
export declare class BuiltinExpander {
    static getSubCode(ins: ir.Intrinsic): number | undefined;
    static expand2Builtin(ins: ir.Intrinsic, operands: ir.OperandType[]): ir.BuiltinAcc | ir.BuiltinBin2 | ir.BuiltinTern3 | ir.BuiltinQuatern4 | ir.BuiltinQuin5 | ir.BuiltinR2i | ir.BuiltinR3i | ir.BuiltinId | ir.BuiltinMidr | ir.BuiltinIdi | ir.BuiltinIdr3i | ir.BuiltinI2r3 | ir.BuiltinI2r4 | ir.BuiltinImm | ir.BuiltinImr2;
}
//# sourceMappingURL=builtinsMap.d.ts.map