import { CloseIterator, CopyDataProperties, CopyModule, CreateArrayWithBuffer, CreateEmptyArray, CreateEmptyObject, CreateObjectHavingMethod, CreateObjectWithBuffer, CreateObjectWithExcludedKeys, SetObjectWithProto, DefineClassWithBuffer, DefineGetterSetterByValue, GetIterator, GetIteratorNext, GetNextPropName, GetPropertiesIterator, ImportModule, IRNode, Label, LdGlobalVar, LdHomeObject, LdLexEnv, LdLexVar, LdModvarByName, LdObjByIndex, LdObjByName, LdSuperByName, NewObjDynRange, ReturnUndefined, StArraySpread, StGlobalVar, StLexVar, StModuleVar, StObjByIndex, StObjByName, StOwnByIndex, StOwnByValue, StSuperByName, StSuperByValue, SuperCall, SuperCallSpread, ThrowConstAssignment, ThrowIfNotObject, ThrowPatternNonCoercible, ThrowIfSuperNotCorrectCall, ThrowThrowNotExists, ThrowUndefinedIfHole, TryLdGlobalByName, TryLdGlobalByValue, TryStGlobalByName, VReg } from "../irnodes";
export declare function loadAccumulatorInt(value: number): IRNode;
export declare function loadAccumulatorFloat(value: number): IRNode;
export declare function loadAccumulatorString(value: string): IRNode;
export declare function loadAccumulator(vreg: VReg): IRNode;
export declare function storeAccumulator(vreg: VReg): IRNode;
export declare function deleteObjProperty(obj: VReg, prop: VReg): IRNode;
export declare function moveVreg(vd: VReg, vs: VReg): IRNode;
export declare function jumpTarget(target: Label): IRNode;
export declare function creatDebugger(): IRNode;
export declare function throwException(): IRNode;
export declare function throwConstAssignment(name: VReg): ThrowConstAssignment;
export declare function throwUndefinedIfHole(hole: VReg, name: VReg): ThrowUndefinedIfHole;
export declare function throwThrowNotExists(): ThrowThrowNotExists;
export declare function loadLexicalEnv(funcObj: VReg): LdLexEnv;
export declare function loadLexicalVar(env: VReg, level: number, slot: number): LdLexVar;
export declare function storeLexicalVar(env: VReg, level: number, slot: number, value: VReg): StLexVar;
export declare function tryLoadGlobalByName(key: string): TryLdGlobalByName;
export declare function tryStoreGlobalByName(key: string): TryStGlobalByName;
export declare function tryLoadGlobalByValue(key: VReg): TryLdGlobalByValue;
export declare function tryStoreGlobalByValue(prop: VReg): IRNode;
export declare function loadGlobalVar(name: string): LdGlobalVar;
export declare function storeGlobalVar(name: string): StGlobalVar;
export declare function loadObjByName(obj: VReg, key: string): LdObjByName;
export declare function storeObjByName(obj: VReg, key: string): StObjByName;
export declare function loadObjByIndex(obj: VReg, index: VReg): LdObjByIndex;
export declare function storeObjByIndex(obj: VReg, index: VReg): StObjByIndex;
export declare function loadObjByValue(obj: VReg, prop: VReg): IRNode;
export declare function storeObjByValue(obj: VReg, prop: VReg): IRNode;
export declare function storeOwnByName(obj: VReg, key: string): IRNode;
export declare function storeOwnByIndex(obj: VReg, index: VReg): StOwnByIndex;
export declare function storeOwnByValue(obj: VReg, value: VReg): StOwnByValue;
export declare function throwIfSuperNotCorrectCall(num: number): ThrowIfSuperNotCorrectCall;
export declare function call(args: VReg[], passThis: boolean): IRNode;
export declare function newObject(args: VReg[]): NewObjDynRange;
export declare function getPropIterator(): GetPropertiesIterator;
export declare function getNextPropName(iter: VReg): GetNextPropName;
export declare function returnUndefined(): ReturnUndefined;
export declare function createEmptyObject(): CreateEmptyObject;
export declare function createObjectHavingMethod(idx: number): CreateObjectHavingMethod;
export declare function createObjectWithBuffer(idx: number): CreateObjectWithBuffer;
export declare function setObjectWithProto(proto: VReg, object: VReg): SetObjectWithProto;
export declare function copyDataProperties(dstObj: VReg, srcObj: VReg): CopyDataProperties;
export declare function defineGetterSetterByValue(obj: VReg, name: VReg, getter: VReg, setter: VReg): DefineGetterSetterByValue;
export declare function createEmptyArray(): CreateEmptyArray;
export declare function createArrayWithBuffer(idx: number): CreateArrayWithBuffer;
export declare function storeArraySpread(array: VReg, index: VReg): StArraySpread;
export declare function defineClassWithBuffer(id: string, idx: number, env: VReg, base: VReg): DefineClassWithBuffer;
export declare function createObjectWithExcludedKeys(obj: VReg, args: VReg[]): CreateObjectWithExcludedKeys;
export declare function throwObjectNonCoercible(): ThrowPatternNonCoercible;
export declare function throwIfNotObject(v: VReg): ThrowIfNotObject;
export declare function getIterator(): GetIterator;
export declare function getIteratorNext(iter: VReg, nextMethod: VReg): GetIteratorNext;
export declare function closeIterator(iter: VReg): CloseIterator;
export declare function superCall(num: number, start: VReg): SuperCall;
export declare function superCallSpread(vs: VReg): SuperCallSpread;
export declare function ldSuperByName(obj: VReg, key: string): LdSuperByName;
export declare function stSuperByName(obj: VReg, key: string): StSuperByName;
export declare function stSuperByValue(obj: VReg, prop: VReg): StSuperByValue;
export declare function ldSuperByValue(obj: VReg, prop: VReg): IRNode;
export declare function importModule(name: string): ImportModule;
export declare function loadModuleVarByName(name: string, module: VReg): LdModvarByName;
export declare function storeModuleVariable(name: string): StModuleVar;
export declare function copyModuleIntoCurrentModule(mod: VReg): CopyModule;
export declare function loadHomeObject(): LdHomeObject;
//# sourceMappingURL=bcGenUtil.d.ts.map